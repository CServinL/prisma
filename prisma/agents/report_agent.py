"""
Report Agent - Generates final literature review reports.
"""

from typing import List, Dict, Any, Optional
from datetime import datetime
from pathlib import Path

from ..storage.models.agent_models import LiteratureReviewReport, ReportMetadata, AnalysisResult


class ReportAgent:
    """Generate structured literature review reports."""
    
    def __init__(self):
        self.output_formats = ['markdown', 'json', 'csv']
    
    def generate(self, analysis_result: AnalysisResult, config: dict) -> LiteratureReviewReport:
        """
        Generate final literature review report.
        
        Args:
            analysis_result: AnalysisResult from AnalysisAgent
            config: Report configuration (format, sections, etc.)
            
        Returns:
            LiteratureReviewReport with structured content
        """
        # Generate report metadata
        metadata = ReportMetadata(
            search_query=config.get('topic', 'Unknown'),
            sources_used=config.get('sources', []),
            papers_analyzed=analysis_result.total_papers,
            total_processing_time=config.get('total_time'),
            search_time=config.get('search_time'),
            analysis_time=config.get('analysis_time'),
            report_time=0.0  # Will be calculated
        )
        
        # Generate main content
        content = self._generate_content(analysis_result, config)
        
        # Generate bibliography
        bibliography = self._generate_bibliography(analysis_result.summaries)
        
        # Create the report
        report = LiteratureReviewReport(
            title=f"Literature Review: {config.get('topic', 'Unknown')}",
            summary_count=len(analysis_result.summaries),
            content=content,
            bibliography=bibliography,
            metadata=metadata,
            export_formats=['markdown', 'json']
        )
        
        return report
    
    def _generate_content(self, analysis_result: AnalysisResult, config: dict) -> str:
        """Generate main report content in markdown format."""
        topic = config.get('topic', 'Unknown Topic')
        
        content = f"""# Literature Review: {topic}

Generated by Prisma - Automated Literature Review Tool

## Executive Summary

This review analyzed **{analysis_result.total_papers} papers** on the topic of "{topic}". The analysis identified **{analysis_result.author_count} unique authors** contributing to this research area.

## Methodology

- **Search Query**: {topic}  
- **Sources**: {', '.join(config.get('sources', ['Unknown']))}
- **Papers Analyzed**: {analysis_result.total_papers}
- **Analysis Date**: {analysis_result.analysis_timestamp.strftime('%Y-%m-%d %H:%M:%S')}
- **Average Processing Time**: {analysis_result.avg_processing_time:.2f}s per paper

## Papers Analyzed

"""
        
        for i, summary in enumerate(analysis_result.summaries, 1):
            connected_papers = summary.connected_papers_url or f"https://www.connectedpapers.com/search?q={summary.title.replace(' ', '%20')}"
            
            content += f"""### {i}. {summary.title}

**Authors:** {', '.join(summary.authors) if summary.authors else 'Unknown Authors'}

**Summary:** {summary.summary}

**Key Findings:**
"""
            
            for finding in summary.key_findings:
                content += f"- {finding}\n"
            
            if summary.methodology:
                content += f"\n**Methodology:** {summary.methodology}\n"
            
            content += f"\n**Connected Papers:** [{summary.title}]({connected_papers})\n"
            content += f"**Analysis Confidence:** {summary.analysis_confidence:.1%}\n\n---\n\n"
        
        # Add research insights
        if analysis_result.top_authors:
            content += "\n## Top Contributing Authors\n\n"
            for author in analysis_result.top_authors[:5]:
                content += f"- {author}\n"
        
        content += f"""

## Analysis Summary

- **Total Papers:** {analysis_result.total_papers}
- **Unique Authors:** {analysis_result.author_count}
- **Search Topic:** {topic}
- **Generated:** {config.get('timestamp', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))}
- **Average Processing Time:** {analysis_result.avg_processing_time:.2f}s per paper

*This is an automated literature review generated by Prisma. Future versions will include advanced analysis, author networks, and thematic grouping.*
"""
        
        return content
    
    def _generate_bibliography(self, summaries: List) -> Optional[List[str]]:
        """Generate bibliography from paper summaries.""" 
        bibliography = []
        for summary in summaries:
            # Generate basic citation format
            authors_str = ', '.join(summary.authors[:3]) if summary.authors else "Unknown Authors"
            if len(summary.authors) > 3:
                authors_str += " et al."
            
            citation = f"{authors_str}. {summary.title}. {summary.url}"
            bibliography.append(citation)
        
        return bibliography if bibliography else None
    
    def _generate_metadata(self, summaries: list, config: dict) -> dict:
        """Generate report metadata."""
        # TODO: Include search parameters, date ranges, source counts
        # TODO: Future: Include ConnectedPapers integration links
        pass
    
    def analyze_authors(self, summaries: list) -> dict:
        """
        Analyze authors across the literature corpus for research directory.
        
        Args:
            summaries: List of paper summaries with author information
            
        Returns:
            Author analysis including profiles, trajectories, and networks
        """
        # TODO: Extract unique authors from all papers
        # TODO: Build comprehensive author profiles
        # TODO: Track research evolution over time
        # TODO: Identify collaboration patterns
        # TODO: Map institutional affiliations
        # TODO: Classify expertise areas
        pass
    
    def create_research_directory(self, author_analysis: dict) -> str:
        """
        Create academic 'telephone guide' of researchers in the field.
        
        Args:
            author_analysis: Results from analyze_authors()
            
        Returns:
            Formatted markdown directory of researchers
        """
        # TODO: Generate researcher profiles with:
        # - Contact information (institutional emails)
        # - Research specializations and keywords
        # - Key publications and contributions
        # - Current institutional affiliation
        # - Research trajectory and evolution
        # - Collaboration patterns
        pass
    
    def map_collaboration_networks(self, summaries: list) -> dict:
        """
        Map research collaboration networks and partnerships.
        
        Args:
            summaries: List of paper summaries with co-authorship data
            
        Returns:
            Network analysis of research collaborations
        """
        # TODO: Analyze co-authorship patterns
        # TODO: Identify research clusters and communities  
        # TODO: Track advisor-student relationships
        # TODO: Map inter-institutional collaborations
        pass
    
    def generate_connected_papers_links(self, summaries: list) -> list:
        """
        Generate ConnectedPapers.com URLs for citation network visualization.
        
        Args:
            summaries: List of paper summaries with DOI/arXiv identifiers
            
        Returns:
            List of ConnectedPapers URLs for key papers
        """
        # TODO: Extract DOI/arXiv IDs from papers
        # TODO: Generate ConnectedPapers URLs
        # Example: https://www.connectedpapers.com/main/{paper_id}/graph
        # TODO: Include in final report for network exploration
        pass
    
    def save_report(self, report: dict, filepath: str) -> bool:
        """Save report to file system."""
        # TODO: Implement file saving in multiple formats
        pass